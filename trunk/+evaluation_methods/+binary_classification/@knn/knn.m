classdef knn
       %Summary of knn:
    %   The kNN class defines a single evaluation 
    %   process. This template aims to define a set of functions
    %   that can easily be adapted to existing methods. In this header
    %   should be a description of the method, the more detailed the better
    %
    %   kNN properties:
    %   parameters - ...
    %   model - ...
    %   reports - ...
    
    %   kNN revision history:
    %   Date of creation: 22 of October 2014
    %   First used in: NM2.0 beta (Helena)
    %   Creator: Carlos Cabral
    properties
        parameters; %FORMAT: struct; Description : Structure with 3 fields: neighbours, distance and p_mahalonobis.
        % neighbours - number of neighbours in the kNN algorithm
        % distance - distance metric to consider eg: 'euclidean','mahalanobis','cosine','seuclidean','cityblock','minkowski','chebychev','spearman','hamming','jaccard','correlation'}
        % p_mahalanobis (optional) - exponent to be used in the mahalanobis distance
        %    - param_eval :data_type 'logical' : dimension [1 1] : range [true false]
        %      Description: whether to use to check the parameters when
        %      applying the method to new data. (default 1).
        %      Default value - True.
        model;  %FORMAT: struct; DESCRIPTION : One field structure with the model generated by the scaling. In this case, a structure with 4 fields:space,target_values, classes and db_code.
        reports; %FORMAT: report class object ; DESCRIPTION: Report class
        %object that describes the status and incidences in the model
        %estimation/application process
    end
    
    methods
        function obj =knn(paramet,model,reports)
            import evaluation_methods.*
            if (nargin==0)
               
               %neighbours :data_type 'integer' : dimension [1 1] : range from 0 to Inf :
               %value : {5},no comment; example for a regular numeric parameter
               %without dependencies on the data.
               neighbours=parameters({int16(5)},'integer',int16([1 1]),'[1 number_of_examples]');
               
               %distance :data_type 'string' : dimension [1 Inf] : range {euclidean,} :
               %value : {0,1,2,3,4,5}; example for a regular character parameter
               %without dependencies on the data.
               distance=parameters({'euclidean'},'char',[1 Inf],{'euclidean','mahalanobis','cosine','seuclidean','cityblock','minkowski','chebychev','spearman','hamming','jaccard','correlation'});
               %assembling the parameters
               
               %p in mahalanobis distance :data_type 'double' : dimension [1 1] : range from -Inf to Inf :
               %value : {[]},comment: 'empty values allowed'; example for a regular numeric parameter
               %without dependencies on the data.
               p_mahalanobis=parameters({[]},'double',int16([1 1]),[-Inf Inf]);
                              
               %param_eval: whether to use to check the parameters when
               %applying the method to new data. (default 1).
               %param_eval :data_type 'logical' : dimension [1 1] : [true false] :
               %value {false} : comment : description of the values; 
               param_eval=parameters({true},'logical',int16([1 1]),[true false],'whether to use to check the parameters when applying the method to new data. (default 1), 0 or 1 (default 1)\n ');
         
               
               paramet=struct('neighbours',neighbours,'distance',distance,'p_mahalanobis',p_mahalanobis,'param_eval',param_eval);
               obj.parameters=paramet;
               obj.model=struct([]);
               obj.reports=report;
            else
                if (nargin==1)
                    obj=binary_classification.knn();
                    if isstruct(paramet)
                        try reporta=parameters_checker(obj.parameters,paramet);
                        catch err
                            rethrow(err)
                        end
                        if reporta.flag
                            obj.parameters=paramet;
                        else
                            error(['knn:Class_error','Error using knn \n Invalid parameters provided. \n ' reporta.descriptor]);
                        end
                    else
                        error(['knn:Class_error','Error using knn \n First input must (parameters) be a structure.']);
                    end
                elseif (nargin==2)
                    obj=binary_classification.knn(paramet);
                    if ~isstruct(model)
                        error('knn:Class_error:Incompability_error','Error using kNN \nSecond input (model) must be a structure.')
                    else
                        aux_model=fieldnames(model);
                        if numel(aux_model)~=4
                           error('knn:Class_error:Incompability_error','Error using kNN \nSecond input (model) must have 3 fields.')
                        else
                           if ~(isfield(model,'space')&&isfield(model,'target_values')&&isfield(model,'db_codes')&&isfield(model,'classes'))
                             error('knn:Class_error:Incompability_error','Error using kNN \nSecond input (model) structure is invalid.')
                           end
                        end
                    end
                    %you might want to add some other guards here to insure
                    %that your model has the fields or the data type that
                    %you wish. 
                    obj.model=model;
                elseif (nargin==3)
                    obj=binary_classification.knn(paramet,model);
                    if ~(sum(isreport(reports))>0)
                        error('knn:Class_error:Incompability_error','Error using kNN \nThird (reports) must be a report class object.')
                    else
                        obj.reports=reports;
                    end
                else
                    error('knn:Class_error:Incompability_error','Invalid numer of arguments specified, please read the kNN class documentation.')
                end
            end
        end
    end
end
